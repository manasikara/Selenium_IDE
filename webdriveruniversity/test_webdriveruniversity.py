# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestUntitled():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_untitled(self):
    self.driver.get("http://webdriveruniversity.com/index.html")
    self.driver.set_window_size(1293, 1087)
    self.vars["window_handles"] = self.driver.window_handles
    self.driver.find_element(By.CSS_SELECTOR, "#dropdown-checkboxes-radiobuttons h1").click()
    self.vars["win4949"] = self.wait_for_window(2000)
    self.vars["root"] = self.driver.current_window_handle
    self.driver.switch_to.window(self.vars["win4949"])
    self.driver.find_element(By.ID, "dropdowm-menu-1").click()
    dropdown = self.driver.find_element(By.ID, "dropdowm-menu-1")
    dropdown.find_element(By.XPATH, "//option[. = 'Python']").click()
    self.driver.find_element(By.ID, "dropdowm-menu-2").click()
    dropdown = self.driver.find_element(By.ID, "dropdowm-menu-2")
    dropdown.find_element(By.XPATH, "//option[. = 'Maven']").click()
    self.driver.find_element(By.ID, "dropdowm-menu-3").click()
    dropdown = self.driver.find_element(By.ID, "dropdowm-menu-3")
    dropdown.find_element(By.XPATH, "//option[. = 'CSS']").click()
    self.driver.find_element(By.CSS_SELECTOR, "label:nth-child(1) > input").click()
    self.driver.find_element(By.CSS_SELECTOR, "label:nth-child(3) > input").click()
    self.driver.find_element(By.CSS_SELECTOR, "label:nth-child(7) > input").click()
    self.driver.find_element(By.NAME, "color").click()
    self.driver.find_element(By.CSS_SELECTOR, "#radio-buttons > input:nth-child(3)").click()
    self.driver.find_element(By.CSS_SELECTOR, "#radio-buttons > input:nth-child(5)").click()
    self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(7)").click()
    self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(9)").click()
    self.driver.find_element(By.NAME, "vegetable").click()
    self.driver.find_element(By.ID, "fruit-selects").click()
    dropdown = self.driver.find_element(By.ID, "fruit-selects")
    dropdown.find_element(By.XPATH, "//option[. = 'Apple']").click()
    self.driver.find_element(By.CSS_SELECTOR, "#radio-buttons-selected-disabled > input:nth-child(5)").click()
    self.driver.close()
    self.driver.switch_to.window(self.vars["root"])
    self.vars["window_handles"] = self.driver.window_handles
    self.driver.find_element(By.CSS_SELECTOR, "#scrolling-around h1").click()
    self.vars["win9515"] = self.wait_for_window(2000)
    self.driver.switch_to.window(self.vars["win9515"])
    self.driver.find_element(By.ID, "zone1").click()
    self.driver.find_element(By.ID, "zone2-entries").click()
    self.driver.find_element(By.ID, "zone3-entries").click()
    self.driver.find_element(By.ID, "zone4").click()
  
